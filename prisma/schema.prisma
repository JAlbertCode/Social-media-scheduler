generator client {
  provider = "prisma-client-js"
}

model PlatformPreferences {
  userId             String
  platform           String
  defaultThreadStyle String?
  autoReplyToThread  Boolean   @default(true)
  threadPacing       Int       @default(0)
  includeTrailingHashtags Boolean @default(true)
  user               User      @relation(fields: [userId], references: [id])

  @@id([userId, platform])
}

model ContentTemplate {
  id               String   @id @default(cuid())
  name             String
  description      String?
  variables        Json     // Array of TemplateVariable
  content          String
  platforms        Json     // Array of platform configurations
  userId           String
  notionTemplateId String?
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
}

model NotionSync {
  id           String   @id @default(cuid())
  userId       String
  postId       String
  notionPageId String
  lastSynced   DateTime
  user         User     @relation(fields: [userId], references: [id])
  post         Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, notionPageId])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  notionSyncs   NotionSync[]
  templates     ContentTemplate[]
  preferences   PlatformPreferences[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String         @id @default(cuid())
  content       String
  platforms     String[]      // Store as JSON array
  scheduledTime DateTime?
  publishedTime DateTime?
  status        PostStatus    @default(DRAFT)
  media         Json?         // Store media metadata as JSON
  metrics       String?       // Store engagement metrics as JSON
  platformData  String?       // Store platform-specific data as JSON
  errorDetails  String?       // Store error messages
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  statusLogs    PostStatusLog[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  notionSync    NotionSync?
}

model PostStatusLog {
  id            String      @id @default(cuid())
  postId        String
  post          Post        @relation(fields: [postId], references: [id])
  status        PostStatus
  platformId    String      // Platform's internal post ID
  errorMessage  String?
  timestamp     DateTime    @default(now())
  
  @@index([postId, timestamp])
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}